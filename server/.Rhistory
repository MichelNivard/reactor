})
},
staticPaths = list(
"/static" = staticDir
)
)
)
stopServer(server)
server <- startServer(
host = "0.0.0.0",
port = 5000,
app = list(
onWSOpen = function(ws) {
ws$onMessage(function(binary, contents) {
cell = fromJSON(contents)
changeset <- notebook$run_cell(cell)
#if(is.null(value)) value <- ""
#result <- list(id = cell$id, result = paste0(capture.output(value), collapse = "\n"), hasImage = hasImage)
result <- map(names(changeset), function(x) {
list(
id = x,
result = paste0(capture.output(changeset[[x]]), collapse = "\n"),
#hasImage = FALSE
hasImage = notebook$cells[[x]]$hasImage
)
})
ws$send(toJSON(result))
})
},
staticPaths = list(
"/static" = staticDir
)
)
)
tryCatch({ a }, error = function(e) e)
stopServer(server)
server <- startServer(
host = "0.0.0.0",
port = 5000,
app = list(
onWSOpen = function(ws) {
ws$onMessage(function(binary, contents) {
cell = fromJSON(contents)
error <- NULL
tryCatch({
changeset <- notebook$run_cell(cell)
},
error = function(e) {
error <- e
})
#if(is.null(value)) value <- ""
#result <- list(id = cell$id, result = paste0(capture.output(value), collapse = "\n"), hasImage = hasImage)
if(is.null(error)) {
result <- map(names(changeset), function(x) {
list(
id = x,
result = paste0(capture.output(changeset[[x]]), collapse = "\n"),
#hasImage = FALSE
hasImage = notebook$cells[[x]]$hasImage
)
})
}
else {
result <- list(id = cell$id, error = error)
}
ws$send(toJSON(result))
})
},
staticPaths = list(
"/static" = staticDir
)
)
)
nb <- ReactiveNotebook$new()
tryCatch({
nb$run_cell(list(id = "a", value = "df <- data.frame(x = 1:10, y = 1:10)"))
}, error = function(e) {
print(e)
})
tryCatch({
nb$run_cell(list(id = "a", value = "a"))
}, error = function(e) {
print(e)
})
tryCatch({
nb$run_cell(list(id = "a", value = "a"))
}, error = function(e) {
print(e)
})
error <- NULL
tryCatch({
nb$run_cell(list(id = "a", value = "a"))
}, error = function(e) {
error <- e
print(e)
})
error
error <- NULL
error <- NULL
result <- tryCatch({
nb$run_cell(list(id = "a", value = "a"))
}, error = function(e) {
e
})
result
class(result)
ReactiveNotebook <- R6Class("ReactiveNotebook",
public = list(
cells = list(),
initialize = function() {
private$env <- new.env()
},
run_in_env = function(code) {
eval(parse(text = code), private$env)
},
run_cell = function(cell) {
private$callstack = c()
# Capture plots
while(dev.cur() > 1) dev.off()
ggplot2:::.store$set(NULL)
svgPath <- paste0(staticDir, "\\", cell$id, ".svg")
svg(filename = svgPath)
dev.control(displaylist = "enable")
#eval(parse(text = paste0("svg('", str_replace_all(svgPath, "\\\\", "/"), "')")), private$env)
#eval(parse(text = 'dev.control(displaylist = "enable")'), private$env)
name <- NULL
if(str_detect(cell$value, "^.+ <-")) {
name <- str_match(cell$value, "^(.+?) ?<-")[,2]
modified_cell <- str_replace(cell$value, paste0("^", name), paste0(name, "_saved"))
eval(parse(text = private$wrap(name)), private$env)
res <- eval(parse(text = modified_cell), private$env)
}
else {
res <- eval(parse(text = cell$value), private$env)
}
#p <- eval(parse(text = "recordPlot()"), private$env)
p <- recordPlot()
p2 <- last_plot()
dev.off()
if(!is.null(p2)) {
ggsave(svgPath)
}
hasImage = !is.null(p[[1]]) || !is.null(p2)
self$cells[[cell$id]] = list(id = cell$id, value = cell$value, hasImage = hasImage);
if(!is.null(name)) {
private$name_to_id[name] = cell$id
}
if(!(cell$id %in% names(V(private$graph)))) {
private$graph <- add_vertices(private$graph, 1, name = cell$id)
}
for(call in private$callstack) {
call_id <- private$name_to_id[call]
if(!are.connected(private$graph, cell$id, call_id)) {
private$graph <- add_edges(private$graph, c(cell$id, call_id))
}
}
# Get dependencies
ego_graph <- make_ego_graph(self$getGraph(), order = 1, nodes = cell$id, mindist = 0, mode = "in")[[1]]
# Sort dependencies to topological order
dependencies <- names(topo_sort(ego_graph, mode = "in")[-1])
if(is.null(res)) res <- ""
updates = list()
updates[[cell$id]] <- res
for(dependency in dependencies) {
updates <- c(updates, self$run_cell(self$cells[[dependency]]))
}
updates
},
data_frame = function() {
bind_rows(self$cells)
},
getGraph = function() {
return(private$graph)
},
print = function() {
for(cell in self$cells) {
cat(cell, "\n", sep = "")
}
}
),
private = list(
env = NULL,
callstack = c(),
name_to_id = c(),
graph = graph.empty(directed = TRUE),
wrap = function(name) {
paste0(name, " %<a-% {
private$callstack <- c(private$callstack, '", name, "')
get('", name, "_saved', private$env)
}
")
}
)
)
stopServer(server)
server <- startServer(
host = "0.0.0.0",
port = 5000,
app = list(
onWSOpen = function(ws) {
ws$onMessage(function(binary, contents) {
cell = fromJSON(contents)
changeset <- tryCatch({
notebook$run_cell(cell)
}, error = function(e) {
e
})
#if(is.null(value)) value <- ""
#result <- list(id = cell$id, result = paste0(capture.output(value), collapse = "\n"), hasImage = hasImage)
if(!("error" %in% class(result))) {
result <- map(names(changeset), function(x) {
list(
id = x,
result = paste0(capture.output(changeset[[x]]), collapse = "\n"),
#hasImage = FALSE
hasImage = notebook$cells[[x]]$hasImage
)
})
}
else {
result <- list(id = cell$id, error = error)
}
ws$send(toJSON(result))
})
},
staticPaths = list(
"/static" = staticDir
)
)
)
stopServer(server)
server <- startServer(
host = "0.0.0.0",
port = 5000,
app = list(
onWSOpen = function(ws) {
ws$onMessage(function(binary, contents) {
cell = fromJSON(contents)
changeset <- tryCatch({
notebook$run_cell(cell)
}, error = function(e) {
e
})
#if(is.null(value)) value <- ""
#result <- list(id = cell$id, result = paste0(capture.output(value), collapse = "\n"), hasImage = hasImage)
if(!("error" %in% class(changeset))) {
result <- map(names(changeset), function(x) {
list(
id = x,
result = paste0(capture.output(changeset[[x]]), collapse = "\n"),
#hasImage = FALSE
hasImage = notebook$cells[[x]]$hasImage
)
})
}
else {
result <- list(id = cell$id, error = error)
}
ws$send(toJSON(result))
})
},
staticPaths = list(
"/static" = staticDir
)
)
)
e
error
result
toString(error)
print(error)
capture.output(error)
capture.output(result)
toString(error)
toString(result)
stopServer(server)
server <- startServer(
host = "0.0.0.0",
port = 5000,
app = list(
onWSOpen = function(ws) {
ws$onMessage(function(binary, contents) {
cell = fromJSON(contents)
changeset <- tryCatch({
notebook$run_cell(cell)
}, error = function(e) {
e
})
#if(is.null(value)) value <- ""
#result <- list(id = cell$id, result = paste0(capture.output(value), collapse = "\n"), hasImage = hasImage)
if(!("error" %in% class(changeset))) {
result <- map(names(changeset), function(x) {
list(
id = x,
result = paste0(capture.output(changeset[[x]]), collapse = "\n"),
#hasImage = FALSE
hasImage = notebook$cells[[x]]$hasImage
)
})
}
else {
result <- list(id = cell$id, error = toString(error))
}
ws$send(toJSON(result))
})
},
staticPaths = list(
"/static" = staticDir
)
)
)
stopServer(server)
server <- startServer(
host = "0.0.0.0",
port = 5000,
app = list(
onWSOpen = function(ws) {
ws$onMessage(function(binary, contents) {
cell = fromJSON(contents)
changeset <- tryCatch({
notebook$run_cell(cell)
}, error = function(e) {
e
})
#if(is.null(value)) value <- ""
#result <- list(id = cell$id, result = paste0(capture.output(value), collapse = "\n"), hasImage = hasImage)
if(!("error" %in% class(changeset))) {
result <- map(names(changeset), function(x) {
list(
id = x,
result = paste0(capture.output(changeset[[x]]), collapse = "\n"),
#hasImage = FALSE
hasImage = notebook$cells[[x]]$hasImage
)
})
}
else {
result <- list(id = cell$id, error = toString(changeset))
}
ws$send(toJSON(result))
})
},
staticPaths = list(
"/static" = staticDir
)
)
)
library(httpuv)
library(jsonlite)
source("ReactiveNotebook.R")
options(max.print = 100)
notebook <- ReactiveNotebook$new()
server <- startServer(
host = "0.0.0.0",
port = 5000,
app = list(
onWSOpen = function(ws) {
ws$onMessage(function(binary, contents) {
cell = fromJSON(contents)
changeset <- tryCatch({
notebook$run_cell(cell)
}, error = function(e) {
e
})
#if(is.null(value)) value <- ""
#result <- list(id = cell$id, result = paste0(capture.output(value), collapse = "\n"), hasImage = hasImage)
if(!("error" %in% class(changeset))) {
result <- map(names(changeset), function(x) {
list(
id = x,
result = paste0(capture.output(changeset[[x]]), collapse = "\n"),
#hasImage = FALSE
hasImage = notebook$cells[[x]]$hasImage
)
})
}
else {
result <- list(id = cell$id, error = toString(changeset))
}
ws$send(toJSON(result))
})
},
staticPaths = list(
"/static" = staticDir
)
)
)
install.packages(c("httpuv", "jsonlite"))
install.packages(c("httpuv", "jsonlite"))
library(httpuv)
library(jsonlite)
source("ReactiveNotebook.R")
options(max.print = 100)
notebook <- ReactiveNotebook$new()
server <- startServer(
host = "0.0.0.0",
port = 5000,
app = list(
onWSOpen = function(ws) {
ws$onMessage(function(binary, contents) {
cell = fromJSON(contents)
changeset <- tryCatch({
notebook$run_cell(cell)
}, error = function(e) {
e
})
#if(is.null(value)) value <- ""
#result <- list(id = cell$id, result = paste0(capture.output(value), collapse = "\n"), hasImage = hasImage)
if(!("error" %in% class(changeset))) {
result <- map(names(changeset), function(x) {
list(
id = x,
result = paste0(capture.output(changeset[[x]]), collapse = "\n"),
#hasImage = FALSE
hasImage = notebook$cells[[x]]$hasImage
)
})
}
else {
result <- list(id = cell$id, error = toString(changeset))
}
ws$send(toJSON(result))
})
},
staticPaths = list(
"/static" = staticDir
)
)
)
staticDir <- tempdir()
source("ReactiveNotebook.R")
options(max.print = 100)
notebook <- ReactiveNotebook$new()
server <- startServer(
host = "0.0.0.0",
port = 5000,
app = list(
onWSOpen = function(ws) {
ws$onMessage(function(binary, contents) {
cell = fromJSON(contents)
changeset <- tryCatch({
notebook$run_cell(cell)
}, error = function(e) {
e
})
#if(is.null(value)) value <- ""
#result <- list(id = cell$id, result = paste0(capture.output(value), collapse = "\n"), hasImage = hasImage)
if(!("error" %in% class(changeset))) {
result <- map(names(changeset), function(x) {
list(
id = x,
result = paste0(capture.output(changeset[[x]]), collapse = "\n"),
#hasImage = FALSE
hasImage = notebook$cells[[x]]$hasImage
)
})
}
else {
result <- list(id = cell$id, error = toString(changeset))
}
ws$send(toJSON(result))
})
},
staticPaths = list(
"/static" = staticDir
)
)
)
install.packages(c("igraph", "pryr"))
stopServer(server)
library(httpuv)
library(jsonlite)
staticDir <- tempdir()
source("ReactiveNotebook.R")
options(max.print = 100)
notebook <- ReactiveNotebook$new()
server <- startServer(
host = "0.0.0.0",
port = 5000,
app = list(
onWSOpen = function(ws) {
ws$onMessage(function(binary, contents) {
cell = fromJSON(contents)
changeset <- tryCatch({
notebook$run_cell(cell)
}, error = function(e) {
e
})
#if(is.null(value)) value <- ""
#result <- list(id = cell$id, result = paste0(capture.output(value), collapse = "\n"), hasImage = hasImage)
if(!("error" %in% class(changeset))) {
result <- map(names(changeset), function(x) {
list(
id = x,
result = paste0(capture.output(changeset[[x]]), collapse = "\n"),
#hasImage = FALSE
hasImage = notebook$cells[[x]]$hasImage
)
})
}
else {
result <- list(id = cell$id, error = toString(changeset))
}
ws$send(toJSON(result))
})
},
staticPaths = list(
"/static" = staticDir
)
)
)
install.packages("svglite")
