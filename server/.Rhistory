result <- list(id = cell$id, error = toString(changeset))
}
}
else if(payload$type == "delete") {
cell <- payload$cell
notebook$delete_cell(cell)
}
if(!is.null(result)) {
ws$send(toJSON(result))
}
})
},
staticPaths = list(
"/static" = staticDir
)
)
)
ReactiveNotebook <- R6Class("ReactiveNotebook",
public = list(
cells = list(),
initialize = function() {
private$env <- new.env()
},
run_in_env = function(code) {
eval(parse(text = code), private$env)
},
delete_cell = function(cell) {
if(!is.null(self$cells[[cell$id]]$name != "")) {
self$run_in_env(paste0("rm(", self$cells[[cell$id]]$name, ")"))
self$run_in_env(paste0("rm(", self$cells[[cell$id]]$name, "_saved)"))
}
self$cells[[cell$id]] <- NULL
private$graph <- delete.vertices(private$graph, V(private$graph)[[cell$id]])
},
run_cell = function(cell, update = TRUE) {
private$callstack = c()
# Capture plots
while(dev.cur() > 1) dev.off()
ggplot2:::.store$set(NULL)
svgPath <- paste0(file.path(staticDir, cell$id), ".svg")
svg(filename = svgPath)
dev.control(displaylist = "enable")
#eval(parse(text = paste0("svg('", str_replace_all(svgPath, "\\\\", "/"), "')")), private$env)
#eval(parse(text = 'dev.control(displaylist = "enable")'), private$env)
name <- NULL
if(str_detect(cell$value, "^.+ <-")) {
name <- str_match(cell$value, "^(.+?) ?<-")[,2]
modified_cell <- str_replace(cell$value, paste0("^", name), paste0(name, "_saved"))
self$run_in_env(private$wrap(name))
res <- self$run_in_env(modified_cell)
}
else {
res <- eval(parse(text = cell$value), private$env)
}
#p <- eval(parse(text = "recordPlot()"), private$env)
p <- recordPlot()
p2 <- last_plot()
dev.off()
if(!is.null(p2)) {
ggsave(svgPath)
}
hasImage = !is.null(p[[1]]) || !is.null(p2)
self$cells[[cell$id]] = list(id = cell$id, value = cell$value, hasImage = hasImage, name = name, result = res);
if(!is.null(name)) {
private$name_to_id[name] = cell$id
}
if(!(cell$id %in% names(V(private$graph)))) {
private$graph <- add_vertices(private$graph, 1, name = cell$id)
}
for(call in private$callstack) {
call_id <- private$name_to_id[call]
if(!are.connected(private$graph, cell$id, call_id)) {
private$graph <- add_edges(private$graph, c(cell$id, call_id))
}
}
if(is.null(res)) res <- ""
updates = c(cell$id)
if(update == TRUE) {
# Get dependencies
ego_graph <- make_ego_graph(self$getGraph(), order = 1000, nodes = cell$id, mindist = 0, mode = "in")[[1]]
# Sort dependencies to topological order
dependencies <- names(topo_sort(ego_graph, mode = "in")[-1])
for(dependency in dependencies) {
updates <- c(updates, self$run_cell(self$cells[[dependency]], update = FALSE))
}
}
updates
},
data_frame = function() {
bind_rows(self$cells)
},
getGraph = function() {
return(private$graph)
},
print = function() {
for(cell in self$cells) {
cat(cell, "\n", sep = "")
}
}
),
private = list(
env = NULL,
callstack = c(),
name_to_id = c(),
graph = graph.empty(directed = TRUE),
wrap = function(name) {
paste0(name, " %<a-% {
private$callstack <- c(private$callstack, '", name, "')
get('", name, "_saved', private$env)
}
")
}
)
)
stopServer(server)
notebook <- ReactiveNotebook$new()
formatCell <- function(cell) {
if(class(cell$result) %in% c("md", "html")) {
res <- paste0(cell$result, collapse = "\n")
}
else if(class(cell) == "view") {
res <- paste0(attr(cell$result, "view"), collapse = "\n")
}
else {
res <- paste0(capture.output(cell$result), collapse = "\n")
}
list(
id = cell$id,
result = res,
value = cell$value,
RClass = class(cell$result),
name = cell$name,
#hasImage = FALSE
hasImage = cell$hasImage
)
}
server <- startServer(
host = "0.0.0.0",
port = 5000,
app = list(
onWSOpen = function(ws) {
ws$send(toJSON(list(cells = map(notebook$cells, formatCell))))
ws$onMessage(function(binary, contents) {
payload = fromJSON(contents)
result <- NULL
if(payload$type == "update") {
cell <- payload$cell
changeset <- tryCatch({
notebook$run_cell(cell)
}, error = function(e) {
e
})
#if(is.null(value)) value <- ""
#result <- list(id = cell$id, result = paste0(capture.output(value), collapse = "\n"), hasImage = hasImage)
if(!("error" %in% class(changeset))) {
result <- map(changeset, function(id) formatCell(notebook$cells[[id]]))
}
else {
result <- list(id = cell$id, error = toString(changeset))
}
}
else if(payload$type == "delete") {
cell <- payload$cell
notebook$delete_cell(cell)
}
if(!is.null(result)) {
ws$send(toJSON(result))
}
})
},
staticPaths = list(
"/static" = staticDir
)
)
)
stopServer(server)
server <- startServer(
host = "0.0.0.0",
port = 5000,
app = list(
onWSOpen = function(ws) {
ws$send(toJSON(list(cells = map(notebook$cells, formatCell))))
ws$onMessage(function(binary, contents) {
payload = fromJSON(contents)
result <- NULL
if(payload$type == "update") {
cell <- payload$cell
changeset <- tryCatch({
notebook$run_cell(cell)
}, error = function(e) {
e
})
#if(is.null(value)) value <- ""
#result <- list(id = cell$id, result = paste0(capture.output(value), collapse = "\n"), hasImage = hasImage)
if(!("error" %in% class(changeset))) {
result <- map(changeset, function(id) formatCell(notebook$cells[[id]]))
}
else {
result <- list(id = cell$id, error = toString(changeset))
}
}
else if(payload$type == "delete") {
cell <- payload$cell
notebook$delete_cell(cell)
}
if(!is.null(result)) {
ws$send(toJSON(result))
}
})
},
staticPaths = list(
"/static" = staticDir
)
)
)
notebook <- ReactiveNotebook$new()
stopServer(server)
server <- startServer(
host = "0.0.0.0",
port = 5000,
app = list(
onWSOpen = function(ws) {
ws$send(toJSON(list(cells = map(notebook$cells, formatCell))))
ws$onMessage(function(binary, contents) {
payload = fromJSON(contents)
result <- NULL
if(payload$type == "update") {
cell <- payload$cell
changeset <- tryCatch({
notebook$run_cell(cell)
}, error = function(e) {
e
})
#if(is.null(value)) value <- ""
#result <- list(id = cell$id, result = paste0(capture.output(value), collapse = "\n"), hasImage = hasImage)
if(!("error" %in% class(changeset))) {
result <- map(changeset, function(id) formatCell(notebook$cells[[id]]))
}
else {
result <- list(id = cell$id, error = toString(changeset))
}
}
else if(payload$type == "delete") {
cell <- payload$cell
notebook$delete_cell(cell)
}
if(!is.null(result)) {
ws$send(toJSON(result))
}
})
},
staticPaths = list(
"/static" = staticDir
)
)
)
stopServer(server)
source('~/reactivenotebook/server/Server.R')
server <- startServer(
host = "0.0.0.0",
port = 5000,
app = list(
onWSOpen = function(ws) {
ws$send(toJSON(list(cells = map(notebook$cells, formatCell))))
ws$onMessage(function(binary, contents) {
payload = fromJSON(contents)
result <- NULL
if(payload$type == "update") {
cell <- payload$cell
changeset <- tryCatch({
notebook$run_cell(cell)
}, error = function(e) {
e
})
#if(is.null(value)) value <- ""
#result <- list(id = cell$id, result = paste0(capture.output(value), collapse = "\n"), hasImage = hasImage)
if(!("error" %in% class(changeset))) {
result <- map(changeset, function(id) formatCell(notebook$cells[[id]]))
}
else {
result <- list(id = cell$id, error = toString(changeset))
}
}
else if(payload$type == "delete") {
cell <- payload$cell
notebook$delete_cell(cell)
}
if(!is.null(result)) {
ws$send(toJSON(result))
}
})
},
staticPaths = list(
"/static" = staticDir
)
)
)
latex <- function(text) {
class(text) <- "latex"
text
}
notebook <- ReactiveNotebook$new()
formatCell <- function(cell) {
if(class(cell$result) %in% c("md", "html", "latex")) {
res <- paste0(cell$result, collapse = "\n")
}
else if(class(cell) == "view") {
res <- paste0(attr(cell$result, "view"), collapse = "\n")
}
else {
res <- paste0(capture.output(cell$result), collapse = "\n")
}
list(
id = cell$id,
result = res,
value = cell$value,
RClass = class(cell$result),
name = cell$name,
#hasImage = FALSE
hasImage = cell$hasImage
)
}
server <- startServer(
host = "0.0.0.0",
port = 5000,
app = list(
onWSOpen = function(ws) {
ws$send(toJSON(list(cells = map(notebook$cells, formatCell))))
ws$onMessage(function(binary, contents) {
payload = fromJSON(contents)
result <- NULL
if(payload$type == "update") {
cell <- payload$cell
changeset <- tryCatch({
notebook$run_cell(cell)
}, error = function(e) {
e
})
#if(is.null(value)) value <- ""
#result <- list(id = cell$id, result = paste0(capture.output(value), collapse = "\n"), hasImage = hasImage)
if(!("error" %in% class(changeset))) {
result <- map(changeset, function(id) formatCell(notebook$cells[[id]]))
}
else {
result <- list(id = cell$id, error = toString(changeset))
}
}
else if(payload$type == "delete") {
cell <- payload$cell
notebook$delete_cell(cell)
}
if(!is.null(result)) {
ws$send(toJSON(result))
}
})
},
staticPaths = list(
"/static" = staticDir
)
)
)
stopServer(server)
server <- startServer(
host = "0.0.0.0",
port = 5000,
app = list(
onWSOpen = function(ws) {
ws$send(toJSON(list(cells = map(notebook$cells, formatCell))))
ws$onMessage(function(binary, contents) {
payload = fromJSON(contents)
result <- NULL
if(payload$type == "update") {
cell <- payload$cell
changeset <- tryCatch({
notebook$run_cell(cell)
}, error = function(e) {
e
})
#if(is.null(value)) value <- ""
#result <- list(id = cell$id, result = paste0(capture.output(value), collapse = "\n"), hasImage = hasImage)
if(!("error" %in% class(changeset))) {
result <- map(changeset, function(id) formatCell(notebook$cells[[id]]))
}
else {
result <- list(id = cell$id, error = toString(changeset))
}
}
else if(payload$type == "delete") {
cell <- payload$cell
notebook$delete_cell(cell)
}
if(!is.null(result)) {
ws$send(toJSON(result))
}
})
},
staticPaths = list(
"/static" = staticDir
)
)
)
notebook$data_frame()
notebook$cells
notebook$cells %>% names
upper.tri()
upper.tri
?upper.tri
saveRDS(notebook, "CAR.rds")
jsonlite::toJSON(matrix(0, 10, 10))
formatCell <- function(cell) {
if(class(cell$result) %in% c("md", "html", "latex")) {
res <- paste0(cell$result, collapse = "\n")
}
else if(class(cell$result) == "matrix") {
res <- cell$result
}
else if(class(cell) == "view") {
res <- paste0(attr(cell$result, "view"), collapse = "\n")
}
else {
res <- paste0(capture.output(cell$result), collapse = "\n")
}
list(
id = cell$id,
result = res,
value = cell$value,
RClass = class(cell$result),
name = cell$name,
#hasImage = FALSE
hasImage = cell$hasImage
)
}
stopServer(server)
server <- startServer(
host = "0.0.0.0",
port = 5000,
app = list(
onWSOpen = function(ws) {
ws$send(toJSON(list(cells = map(notebook$cells, formatCell))))
ws$onMessage(function(binary, contents) {
payload = fromJSON(contents)
result <- NULL
if(payload$type == "update") {
cell <- payload$cell
changeset <- tryCatch({
notebook$run_cell(cell)
}, error = function(e) {
e
})
#if(is.null(value)) value <- ""
#result <- list(id = cell$id, result = paste0(capture.output(value), collapse = "\n"), hasImage = hasImage)
if(!("error" %in% class(changeset))) {
result <- map(changeset, function(id) formatCell(notebook$cells[[id]]))
}
else {
result <- list(id = cell$id, error = toString(changeset))
}
}
else if(payload$type == "delete") {
cell <- payload$cell
notebook$delete_cell(cell)
}
if(!is.null(result)) {
ws$send(toJSON(result))
}
})
},
staticPaths = list(
"/static" = staticDir
)
)
)
stopServer(server)
server <- startServer(
host = "0.0.0.0",
port = 5000,
app = list(
onWSOpen = function(ws) {
ws$send(toJSON(list(cells = map(notebook$cells, formatCell))))
ws$onMessage(function(binary, contents) {
payload = fromJSON(contents)
result <- NULL
if(payload$type == "update") {
cell <- payload$cell
changeset <- tryCatch({
notebook$run_cell(cell)
}, error = function(e) {
e
})
#if(is.null(value)) value <- ""
#result <- list(id = cell$id, result = paste0(capture.output(value), collapse = "\n"), hasImage = hasImage)
if(!("error" %in% class(changeset))) {
result <- map(changeset, function(id) formatCell(notebook$cells[[id]]))
}
else {
result <- list(id = cell$id, error = toString(changeset))
}
}
else if(payload$type == "delete") {
cell <- payload$cell
notebook$delete_cell(cell)
}
if(!is.null(result)) {
ws$send(toJSON(result))
}
})
},
staticPaths = list(
"/static" = staticDir
)
)
)
